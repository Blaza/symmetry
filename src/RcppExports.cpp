// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BHI_Cpp
double BHI_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_BHI_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(BHI_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// BHK_Cpp
double BHK_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_BHK_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(BHK_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// CM_Cpp
double CM_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_CM_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(CM_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// HG_Cpp
double HG_Cpp(const NumericVector& X, int k, double t, bool H);
RcppExport SEXP _symmetry_HG_Cpp(SEXP XSEXP, SEXP kSEXP, SEXP tSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(HG_Cpp(X, k, t, H));
    return rcpp_result_gen;
END_RCPP
}
// I1_Cpp
double I1_Cpp(const NumericVector& X, double k_in);
RcppExport SEXP _symmetry_I1_Cpp(SEXP XSEXP, SEXP k_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k_in(k_inSEXP);
    rcpp_result_gen = Rcpp::wrap(I1_Cpp(X, k_in));
    return rcpp_result_gen;
END_RCPP
}
// I2_Cpp
double I2_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2A_Cpp
double I2A_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2A_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2A_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2HU_Cpp
double I2HU_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2HU_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2HU_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2HUA_Cpp
double I2HUA_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2HUA_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2HUA_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2U_Cpp
double I2U_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2U_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2U_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2UA_Cpp
double I2UA_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2UA_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2UA_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2UAS_Cpp
double I2UAS_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2UAS_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2UAS_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2US_Cpp
double I2US_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_I2US_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2US_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// K1_Cpp
double K1_Cpp(const NumericVector& X, double k_in);
RcppExport SEXP _symmetry_K1_Cpp(SEXP XSEXP, SEXP k_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k_in(k_inSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_Cpp(X, k_in));
    return rcpp_result_gen;
END_RCPP
}
// K2_get_samples
NumericMatrix K2_get_samples(const NumericVector& X);
RcppExport SEXP _symmetry_K2_get_samples(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_get_samples(X));
    return rcpp_result_gen;
END_RCPP
}
// K2U_get_samples
NumericMatrix K2U_get_samples(const NumericVector& X);
RcppExport SEXP _symmetry_K2U_get_samples(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2U_get_samples(X));
    return rcpp_result_gen;
END_RCPP
}
// L1_Cpp
double L1_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_L1_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(L1_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// NAI_Cpp
double NAI_Cpp(const NumericVector& X, double k_in);
RcppExport SEXP _symmetry_NAI_Cpp(SEXP XSEXP, SEXP k_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k_in(k_inSEXP);
    rcpp_result_gen = Rcpp::wrap(NAI_Cpp(X, k_in));
    return rcpp_result_gen;
END_RCPP
}
// NAK_Cpp
double NAK_Cpp(const NumericVector& X, double k_in);
RcppExport SEXP _symmetry_NAK_Cpp(SEXP XSEXP, SEXP k_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k_in(k_inSEXP);
    rcpp_result_gen = Rcpp::wrap(NAK_Cpp(X, k_in));
    return rcpp_result_gen;
END_RCPP
}
// WCX_Cpp
double WCX_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_WCX_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(WCX_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// randomize_sign
NumericVector randomize_sign(const NumericVector& X, double mu);
RcppExport SEXP _symmetry_randomize_sign(SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(randomize_sign(X, mu));
    return rcpp_result_gen;
END_RCPP
}
// sample_with_replacement
NumericVector sample_with_replacement(NumericVector x, int n);
RcppExport SEXP _symmetry_sample_with_replacement(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_with_replacement(x, n));
    return rcpp_result_gen;
END_RCPP
}
// reflect_sample
NumericVector reflect_sample(const NumericVector& X, double mu, int n);
RcppExport SEXP _symmetry_reflect_sample(SEXP XSEXP, SEXP muSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(reflect_sample(X, mu, n));
    return rcpp_result_gen;
END_RCPP
}
// reflected_boot
NumericVector reflected_boot(const NumericVector& X, double mu);
RcppExport SEXP _symmetry_reflected_boot(SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(reflected_boot(X, mu));
    return rcpp_result_gen;
END_RCPP
}
// trimmed_mean
double trimmed_mean(const NumericVector& X, double alpha);
RcppExport SEXP _symmetry_trimmed_mean(SEXP XSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(trimmed_mean(X, alpha));
    return rcpp_result_gen;
END_RCPP
}
// boot_sample
NumericVector boot_sample(const NumericVector& X, double trim_alpha, int B, std::string null_method, std::string stat, int k);
RcppExport SEXP _symmetry_boot_sample(SEXP XSEXP, SEXP trim_alphaSEXP, SEXP BSEXP, SEXP null_methodSEXP, SEXP statSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type trim_alpha(trim_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type null_method(null_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sample(X, trim_alpha, B, null_method, stat, k));
    return rcpp_result_gen;
END_RCPP
}
// mn_boot_sample
NumericVector mn_boot_sample(const NumericVector& X, double trim_alpha, int B, std::string stat, int k, double q);
RcppExport SEXP _symmetry_mn_boot_sample(SEXP XSEXP, SEXP trim_alphaSEXP, SEXP BSEXP, SEXP statSEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type trim_alpha(trim_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(mn_boot_sample(X, trim_alpha, B, stat, k, q));
    return rcpp_result_gen;
END_RCPP
}
// lm_resid
NumericVector lm_resid(const arma::mat& X, NumericVector& yr);
RcppExport SEXP _symmetry_lm_resid(SEXP XSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_resid(X, yr));
    return rcpp_result_gen;
END_RCPP
}
// boot_sample_lm
NumericVector boot_sample_lm(const arma::mat& model_matrix, const NumericVector& fitted, const NumericVector& residuals, int B, std::string null_method, std::string stat, int k);
RcppExport SEXP _symmetry_boot_sample_lm(SEXP model_matrixSEXP, SEXP fittedSEXP, SEXP residualsSEXP, SEXP BSEXP, SEXP null_methodSEXP, SEXP statSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type null_method(null_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sample_lm(model_matrix, fitted, residuals, B, null_method, stat, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_symmetry_BHI_Cpp", (DL_FUNC) &_symmetry_BHI_Cpp, 1},
    {"_symmetry_BHK_Cpp", (DL_FUNC) &_symmetry_BHK_Cpp, 1},
    {"_symmetry_CM_Cpp", (DL_FUNC) &_symmetry_CM_Cpp, 1},
    {"_symmetry_HG_Cpp", (DL_FUNC) &_symmetry_HG_Cpp, 4},
    {"_symmetry_I1_Cpp", (DL_FUNC) &_symmetry_I1_Cpp, 2},
    {"_symmetry_I2_Cpp", (DL_FUNC) &_symmetry_I2_Cpp, 1},
    {"_symmetry_I2A_Cpp", (DL_FUNC) &_symmetry_I2A_Cpp, 1},
    {"_symmetry_I2HU_Cpp", (DL_FUNC) &_symmetry_I2HU_Cpp, 1},
    {"_symmetry_I2HUA_Cpp", (DL_FUNC) &_symmetry_I2HUA_Cpp, 1},
    {"_symmetry_I2U_Cpp", (DL_FUNC) &_symmetry_I2U_Cpp, 1},
    {"_symmetry_I2UA_Cpp", (DL_FUNC) &_symmetry_I2UA_Cpp, 1},
    {"_symmetry_I2UAS_Cpp", (DL_FUNC) &_symmetry_I2UAS_Cpp, 1},
    {"_symmetry_I2US_Cpp", (DL_FUNC) &_symmetry_I2US_Cpp, 1},
    {"_symmetry_K1_Cpp", (DL_FUNC) &_symmetry_K1_Cpp, 2},
    {"_symmetry_K2_get_samples", (DL_FUNC) &_symmetry_K2_get_samples, 1},
    {"_symmetry_K2U_get_samples", (DL_FUNC) &_symmetry_K2U_get_samples, 1},
    {"_symmetry_L1_Cpp", (DL_FUNC) &_symmetry_L1_Cpp, 2},
    {"_symmetry_NAI_Cpp", (DL_FUNC) &_symmetry_NAI_Cpp, 2},
    {"_symmetry_NAK_Cpp", (DL_FUNC) &_symmetry_NAK_Cpp, 2},
    {"_symmetry_WCX_Cpp", (DL_FUNC) &_symmetry_WCX_Cpp, 1},
    {"_symmetry_randomize_sign", (DL_FUNC) &_symmetry_randomize_sign, 2},
    {"_symmetry_sample_with_replacement", (DL_FUNC) &_symmetry_sample_with_replacement, 2},
    {"_symmetry_reflect_sample", (DL_FUNC) &_symmetry_reflect_sample, 3},
    {"_symmetry_reflected_boot", (DL_FUNC) &_symmetry_reflected_boot, 2},
    {"_symmetry_trimmed_mean", (DL_FUNC) &_symmetry_trimmed_mean, 2},
    {"_symmetry_boot_sample", (DL_FUNC) &_symmetry_boot_sample, 6},
    {"_symmetry_mn_boot_sample", (DL_FUNC) &_symmetry_mn_boot_sample, 6},
    {"_symmetry_lm_resid", (DL_FUNC) &_symmetry_lm_resid, 2},
    {"_symmetry_boot_sample_lm", (DL_FUNC) &_symmetry_boot_sample_lm, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_symmetry(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

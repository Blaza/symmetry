// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// HG_Cpp
double HG_Cpp(const NumericVector& X, int k, double t, bool H);
RcppExport SEXP symmetry_HG_Cpp(SEXP XSEXP, SEXP kSEXP, SEXP tSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(HG_Cpp(X, k, t, H));
    return rcpp_result_gen;
END_RCPP
}
// I1_Cpp
double I1_Cpp(const NumericVector& X, int k);
RcppExport SEXP symmetry_I1_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(I1_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// I2_Cpp
double I2_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2A_Cpp
double I2A_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2A_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2A_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2HU_Cpp
double I2HU_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2HU_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2HU_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2HUA_Cpp
double I2HUA_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2HUA_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2HUA_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2U_Cpp
double I2U_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2U_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2U_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2UA_Cpp
double I2UA_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2UA_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2UA_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2UAS_Cpp
double I2UAS_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2UAS_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2UAS_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// I2US_Cpp
double I2US_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_I2US_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(I2US_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// K1_Cpp
double K1_Cpp(const NumericVector& X, int k);
RcppExport SEXP symmetry_K1_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// K2_get_samples
NumericMatrix K2_get_samples(const NumericVector& X);
RcppExport SEXP symmetry_K2_get_samples(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_get_samples(X));
    return rcpp_result_gen;
END_RCPP
}
// K2U_get_samples
NumericMatrix K2U_get_samples(const NumericVector& X);
RcppExport SEXP symmetry_K2U_get_samples(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2U_get_samples(X));
    return rcpp_result_gen;
END_RCPP
}
// WCX_Cpp
double WCX_Cpp(const NumericVector& X);
RcppExport SEXP symmetry_WCX_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(WCX_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
